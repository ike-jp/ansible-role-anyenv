---
# Env name of this file
- name: Set interp env name
  set_fact:
    env_name: luaenv


- name: Set env params of this file
  set_fact:
    env_params: "{{ item }}"
  when: '"{{ item.name }}" == "{{ env_name }}"'
  with_items:
    - "{{ anyenv_envs }}"


# Usually **env has -s option in installation command,
# but luaenv not having it. So I used failed_when.
- name: Install versions
  shell: |
    /bin/bash -lc "source {{ anyenv_export_profile_to_add_path }}"
    /bin/bash -lc "{{ item.0.name }} install {{ item.1 }}"
  register: result
  changed_when:
    - "'already exists' not in result.stderr"
    - "'already installed' not in result.stderr"
  failed_when:
    - result.stderr != ""
    - "'already exists' not in result.stderr"
    - "'already installed' not in result.stderr"
    # added for rbenv
    #- "'Installed' not in result.stderr"
  with_items:
    - "{{ anyenv_envs }}"
    - "installation_versions"
  tags: anyenv


- name: Rehash env
  shell: |
    /bin/bash -lc "source {{ anyenv_export_profile_to_add_path }}"
    /bin/bash -lc "{{ env_name }} rehash"
  register: result
  changed_when:
    - result.stdout != ""
    - result.stderr != ""
  tags: anyenv


- name: Set global version
  shell: |
    /bin/bash -lc "source {{ anyenv_export_profile_to_add_path }}"
    /bin/bash -lc "{{ env_name }} version"
    /bin/bash -lc "{{ env_name }} global {{ env_params.global_version | default(system) }}"
    /bin/bash -lc "{{ env_name }} version"
  register: result
  changed_when:
    - '"{{ result.stdout_lines[0] | default(0) }}" != "{{ result.stdout_lines[1] | default(1) }}"'
    - "'no versions' not in result.stderr"
  failed_when:
    - result.stderr != ""
    - "'no versions' not in result.stderr"
  tags: anyenv


