---
# Include variables and define needed variables.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"


- include: setup-RedHat.yml
  when: ansible_os_family == "RedHat"


- include: setup-Debian.yml
  when: ansible_os_family == "Debian"


- name: Install anyenv
  git:
    repo: "{{ anyenv_repository_url }}"
    dest: "{{ anyenv_installaton_dir }}"
  tags: anyenv


- name: Install anyenv-plugins
  git:
    repo: "{{ item.repository_url }}"
    dest: "{{ anyenv_plugins_installation_dir }}/{{ item.name }}"
  with_items:
    - "{{ anyenv_plugins }}"
  tags: anyenv


- name: Add path to profile
  blockinfile:
    dest: "{{ anyenv_export_profile_to_add_path }}"
    block: "{{ anyenv_export_block }}"
    insertafter: EOF
  when: anyenv_export
  tags: anyenv


- name: Update anyenv
  tags: anyenv
  shell: |
    /bin/bash -lc "source {{ anyenv_export_profile_to_add_path }}"
    /bin/bash -lc "anyenv update"
  register: result
  changed_when: false
  tags: anyenv


# When added -s option, anyenv will skip the installation.
- name: Install envs
  shell: |
    /bin/bash -lc "source {{ anyenv_export_profile_to_add_path }}"
    /bin/bash -lc "anyenv install -s {{ item.name }}"
  register: result
  changed_when:
    - result.stdout != ""
    - result.stderr != ""
  with_items: "{{ anyenv_envs }}"
  tags: anyenv


# Usually **env has -s option in installation command,
# but luaenv not having it. So I used failed_when.
- name: Install versions
  shell: |
    /bin/bash -lc "source {{ anyenv_export_profile_to_add_path }}"
    /bin/bash -lc "{{ item.0.name }} install {{ item.1 }}"
  register: result
  changed_when:
    - "'already exists' not in result.stderr"
    - "'already installed' not in result.stderr"
  failed_when:
    - result.stderr != ""
    # added for pyenv, luaenv
    - "'already exists' not in result.stderr"
    - "'already installed' not in result.stderr"
    # added for rbenv
    - "'Installed' not in result.stderr"
  with_subelements:
    - "{{ anyenv_envs }}"
    - "installation_versions"
  tags: anyenv


- name: Rehash envs
  shell: |
    /bin/bash -lc "source {{ anyenv_export_profile_to_add_path }}"
    /bin/bash -lc "{{ item.name }} rehash"
  register: result
  changed_when:
    - result.stdout != ""
    - result.stderr != ""
  with_items: "{{ anyenv_envs }}"
  tags: anyenv


- name: Set global version
  shell: |
    /bin/bash -lc "source {{ anyenv_export_profile_to_add_path }}"
    /bin/bash -lc "{{ item.name }} version"
    /bin/bash -lc "{{ item.name }} global {{ item.global_version | default(system) }}"
    /bin/bash -lc "{{ item.name }} version"
  register: result
  changed_when:
    - '"{{ result.stdout_lines[0] | default(0) }}" != "{{ result.stdout_lines[1] | default(1) }}"'
    - "'no versions' not in result.stderr"
  failed_when:
    - result.stderr != ""
    - "'no versions' not in result.stderr"
  with_items:
    - "{{ anyenv_envs }}"
  tags: anyenv


